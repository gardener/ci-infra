plank:
  job_url_template: 'https://prow.gardener.cloud/view/gs/gardener-prow/{{if eq .Spec.Type "presubmit"}}pr-logs/pull{{else if eq .Spec.Type "batch"}}pr-logs/pull{{else}}logs{{end}}{{if .Spec.Refs}}{{if ne .Spec.Refs.Org ""}}{{if ne .Spec.Refs.Org "kubernetes"}}/{{if and (eq .Spec.Refs.Org "kubernetes-sigs") (ne .Spec.Refs.Repo "poseidon")}}sigs.k8s.io{{else}}{{.Spec.Refs.Org}}{{end}}_{{.Spec.Refs.Repo}}{{else if ne .Spec.Refs.Repo "kubernetes"}}/{{.Spec.Refs.Repo}}{{end}}{{end}}{{end}}{{if eq .Spec.Type "presubmit"}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}{{else if eq .Spec.Type "batch"}}/batch{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}/'
  report_templates:
    '*': >-
      [Full PR test history](https://prow.gardener.cloud/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}).
      [Your PR dashboard](https://prow.gardener.cloud/pr?query=is%3Apr%20state%3Aopen%20author%3A{{with index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).
      [Command help for this repository](https://prow.gardener.cloud/command-help?repo={{.Spec.Refs.Org}}%2F{{.Spec.Refs.Repo}}).

      Please help us cut down on flakes by linking this test failure to an [open flake report](https://github.com/{{.Spec.Refs.Org}}/{{.Spec.Refs.Repo}}/issues?q=is:issue+is:open+label:kind/flake) or filing a [new flake report](https://github.com/{{.Spec.Refs.Org}}/{{.Spec.Refs.Repo}}/issues/new?template=flaking-test.md&title=%5BFlaky+Test%5D+FLAKING+TEST%2FSUITE) if you can't find an existing one.
      Also see our [testing guideline](https://github.com/gardener/gardener/blob/master/docs/development/testing.md) for how to avoid and hunt flakes.
  job_url_prefix_config:
    '*': https://prow.gardener.cloud/view/
  pod_pending_timeout: 15m
  pod_unscheduled_timeout: 15m
  default_decoration_configs:
    '*':
      timeout: 2h
      grace_period: 15m
      utility_images:
        clonerefs: "us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20241113-0609cf597"
        initupload: "us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20241113-0609cf597"
        entrypoint: "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20241113-0609cf597"
        sidecar: "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20241113-0609cf597"
      gcs_configuration:
        bucket: "gardener-prow"
        path_strategy: explicit
      gcs_credentials_secret: "gardener-prow-storage"
      resources:
        clonerefs:
          requests:
            cpu: 100m
        initupload:
          requests:
            cpu: 100m
        place_entrypoint:
          requests:
            cpu: 100m
        sidecar:
          requests:
            cpu: 100m

sinker:
  resync_period: 1m
  max_prowjob_age: 48h
  max_pod_age: 48h
  terminated_pod_ttl: 30m

deck:
  spyglass:
    size_limit: 100000000 # 100MB
    gcs_browser_prefix: https://gcsweb.prow.gardener.cloud/gcs/
    testgrid_config: gs://gardener-prow/testgrid/config
    testgrid_root: https://testgrid.k8s.io/
    lenses:
    - lens:
        name: metadata
      required_files:
      - ^(?:started|finished)\.json$
      optional_files:
      - ^(?:podinfo|prowjob)\.json$
    - lens:
        name: buildlog
        config:
          highlight_regexes:
          - "[tT]imed out"
          - "ERROR:"
          - "Error:"
          - (FAIL|Failure \[|FAILED)\b
          - panic\b
          - level=fatal\b
          - "fatal:"
          - ^E\d{4} \d\d:\d\d:\d\d\.\d\d\d]
          - make:.*Error\b
          # This highlights the start of tests to skip noise in build log
          - "^> (Test|Test Cover|Integration Tests|E2E Tests)$"
          # This is the standard ginkgo error in e2e tests
          - "Expected success, but got an error"
      required_files:
        - ^.*build-log\.txt$
    - lens:
        name: junit
      required_files:
        - ^artifacts(/.*/|/)junit.*\.xml$ # https://regex101.com/r/vCSegS/1
    - lens:
        name: coverage
      required_files:
        - ^artifacts/filtered\.cov$
      optional_files:
        - ^artifacts/filtered\.html$
    - lens:
        name: podinfo
      required_files:
        - ^podinfo\.json$
    - lens:
        name: links
      required_files:
        - artifacts/.*\.link\.txt
  tide_update_period: 1s
  rerun_auth_configs:
    '*':
      github_team_ids:
      - 5415312 # ci-infra-maintainers
  branding:
    header_color: "#0b8062"
    logo: "/static/gardener/gardener.svg"
    favicon: "gardener/gardener-favicon.png"

prowjob_namespace: prow
pod_namespace: test-pods
log_level: info

slack_reporter_configs:
  '*':
    job_types_to_report:
      - postsubmit
      - periodic
      - batch
    job_states_to_report:
      - failure
      - error
    channel: test-failures
    report_template: |
      *Job:* {{.Spec.Job}} ({{.Spec.Type}})
      *Status:* {{.Status.State}}
      {{ with .Spec.Refs}}*Repository:* {{.Org}}/{{.Repo}}
      *Commit:* <{{.BaseLink}}|{{printf "%.7s" .BaseSHA}}>
      {{ end}}*<{{.Status.URL}}|View logs>*

branch-protection:
  orgs:
    gardener:
      repos:
        ci-infra:
          protect: true
          include:
          - "master"
          required_status_checks:
            contexts:
            - license/cla
          restrictions: # prevent everyone except gardener-prow from pushing/merging (except admins and gardener-prow)
            apps:
            - gardener-prow
            users: []
            teams: []
          enforce_admins: true # protections apply to admins as well
        gardener:
          protect: true
          include:
          - "master"
          - "release-.*"
          required_status_checks:
            contexts:
            - license/cla
          restrictions: # prevent everyone from pushing/merging (except admins, gardener-prow and ci robots)
            apps:
            - gardener-prow
            users: []
            teams:
            - ci # allow CI users (e.g. concourse) to push (e.g. release commits)
          enforce_admins: false # protections don't apply to admins
        gardener-extension-registry-cache:
          protect: true
          include:
          - "main"
          required_status_checks:
            contexts:
            - license/cla
          restrictions: # prevent everyone from pushing/merging (except admins, gardener-prow and ci robots)
            apps:
            - gardener-prow
            users: []
            teams:
            - ci # allow CI users (e.g. concourse) to push (e.g. release commits)
          enforce_admins: false # protections don't apply to admins
        dependency-watchdog:
          protect: true
          include:
            - "master"
          required_status_checks:
            contexts:
              - license/cla
          restrictions: # prevent everyone from pushing/merging (except admins, gardener-prow and ci robots)
            apps:
              - gardener-prow
            users: []
            teams:
              - ci # allow CI users (e.g. concourse) to push (e.g. release commits)
          enforce_admins: false # protections don't apply to admins
        gardener-extension-shoot-rsyslog-relp:
          protect: true
          include:
          - "main"
          required_status_checks:
            contexts:
            - license/cla
          restrictions: # prevent everyone from pushing/merging (except admins, gardener-prow and ci robots)
            apps:
            - gardener-prow
            users: []
            teams:
            - ci # allow CI users (e.g. concourse) to push (e.g. release commits)
          enforce_admins: false # protections don't apply to admins
        gardener-discovery-server:
          protect: true
          include:
          - "main"
          required_status_checks:
            contexts:
            - license/cla
          restrictions: # prevent everyone from pushing/merging (except admins, gardener-prow and ci robots)
            apps:
            - gardener-prow
            users: []
            teams:
            - ci # allow CI users (e.g. concourse) to push (e.g. release commits)
          enforce_admins: false # protections don't apply to admins
        cert-management:
          protect: true
          include:
          - "master"
          required_status_checks:
            contexts:
            - license/cla
            - concourse-ci/build
            - concourse-ci/build_oci_image_cert-management
            - concourse-ci/check
            - concourse-ci/publish
          restrictions: # prevent everyone from pushing/merging (except admins, gardener-prow and ci robots)
            apps:
            - gardener-prow
            users: []
            teams:
            - ci # allow CI users (e.g. concourse) to push (e.g. release commits)
          enforce_admins: false # protections don't apply to admins

tide:
  sync_period: 1m
  queries:
  # default configuration for repositories that should be onboarded to tide
  - repos: &tide-onboarded-repos
    - gardener/ci-infra
    - gardener/gardener
    - gardener/gardener-extension-registry-cache
    - gardener/dependency-watchdog
    - gardener/gardener-extension-shoot-rsyslog-relp
    - gardener/gardener-discovery-server
    - gardener/cert-management
    labels:
    - lgtm
    - approved
    - "cla: yes"
    missingLabels: &tide-default-missing-labels
    - do-not-merge/blocked-paths
    - do-not-merge/contains-merge-commits
    - do-not-merge/hold
    - do-not-merge/invalid-commit-message
    - do-not-merge/invalid-owners-file
    - do-not-merge/needs-kind
    - do-not-merge/release-note-label-needed
    - do-not-merge/work-in-progress
    - needs-rebase
    - "cla: no"

  # configuration for automerging robot PRs
  - author: gardener-ci-robot
    repos: *tide-onboarded-repos
    labels:
    # gardener-ci-robot adds this label to PRs that should be merged automatically
    - skip-review
    - "cla: yes"
    missingLabels: *tide-default-missing-labels

  context_options:
    # Use branch protection options to define required and optional contexts
    from-branch-protection: true
    # Overwrite pending contexts of a PR when it can be merged because of a successful batch job
    overwrite-pending-contexts: true
  merge_method:
    gardener/ci-infra: squash
    gardener/gardener: squash
    gardener/gardener-extension-registry-cache: squash
    gardener/dependency-watchdog: squash
    gardener/gardener-extension-shoot-rsyslog-relp: squash
    gardener/gardener-discovery-server: squash
    gardener/cert-management: squash
  pr_status_base_urls:
    '*': https://prow.gardener.cloud/pr
  blocker_label: tide/merge-blocker
  squash_label: tide/merge-method-squash
  rebase_label: tide/merge-method-rebase
  merge_label: tide/merge-method-merge
  priority:
  - labels: [ "kind/flake", "priority/critical-urgent" ]
  - labels: [ "kind/regression", "priority/critical-urgent" ]
  - labels: [ "kind/bug", "priority/critical-urgent" ]

github_reporter:
  job_types_to_report:
  - presubmit
  - postsubmit

presets:
# docker-in-docker (with images/bootstrap) preset
# NOTE: using this also requires using that image,
# ensuring you run your test under either the ENTRYPOINT or:
# /usr/local/bin/runner.sh my-test-command --foo --bar
# AND setting the following on your PodSpec:
# securityContext:
#   privileged: true
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  # kubekins-e2e legacy path
  - name: docker-graph
    emptyDir: {}
  # krte (normal) path
  - name: docker-root
    emptyDir: {}
  - name: docker-config
    configMap:
      name: dind-docker-config
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
  - name: docker-config
    mountPath: /etc/docker
# volume mounts for kind
- labels:
    preset-kind-volume-mounts: "true"
  volumeMounts:
    - mountPath: /lib/modules
      name: modules
      readOnly: true
    - mountPath: /sys/fs/cgroup
      name: cgroup
  volumes:
    - name: modules
      hostPath:
        path: /lib/modules
        type: Directory
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory
# enable GOPROXY by default and use local athens-proxy as primary choice
- env:
  - name: GOPROXY
    value: "http://athens-proxy.athens.svc.cluster.local,direct"
